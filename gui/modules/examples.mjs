export const examples = [{"name": "Sample", "data": "{\n    // comments\n    mode: 48, // Sv3/9\n    // Sample JSON for running test cases\n    // memory_size: 0x8000000000,\n    test_cases: [\n        { repeats: 4 },\n        {\n            repeats: 4, // How many times to make the test case\n            // Probabilistic fields:\n            // same_va_pa: 0.05,\n            // // reuse_pte: 0.05,\n            // aliasing: 0.05,\n            // // VA and PA take the data\n            // va: 0x99301234,\n            // pa: 0x14231234,\n            ptes: [\n                {\n                    // PTE entry -- set the address + the PPNs\n                    // address: 0x12399ff000,\n                    // ppns: [null, 0x119, null],\n                },\n                {},\n                {},\n                {\n                    attributes: {\n                        // Set the flags (RSW, DAGUXWRV) probabilistically on the PTE\n                        G: 0.5, // Float for probabilities\n                        U: 1, // 0 - 1 aren't probabilities\n                        X: 0.5, // Float for probabilities\n                        W: 0, // 0 - 1 aren't probabilities\n                        R: 1, // 0 - 1 aren't probabilities\n                    },\n                },\n            ],\n        },\n        {\n            same_va_pa: 1,\n        },\n        {\n            repeats: 2,\n            aliasing: 1,\n            reuse_pte: 1\n        },\n        {\n            pagesize: '2M',\n        }\n    ],\n}"}, {"name": "Sample 2", "data": "{\n    // comments\n    mode: 48, // Sv48\n    // Sample JSON for running test cases\n    // memory_size: 0x3000000000, // 192 GB\n    // lower_bound: 0x2000000000, // Start addresses from at least here\n    // You can set the SATP globally:\n    satp: 0x254290f8df7, // If you set it as a number, it's interpreted to mean the PPN, ASID is 0. Mode is automatic\n    test_cases: [\n        {\n            repeats: 10, // How many times to make this kind of test case\n            ptes: [\n                {},\n                {},\n                {},\n                {\n                    attributes: {\n                        // Set the flags (RSW, DAGUXWRV) probabilistically on the PTE\n                        G: 0.5, // Float for probabilities\n                        U: 1, // 0 - 1 set/unset flags\n                        X: 0.5, // Float for probabilities\n                        W: 0, // 0 - 1 set/unset flags\n                        R: 1, // 0 - 1 set/unset flags\n                    },\n                },\n            ],\n        },\n        {\n            repeats: 5,\n            reuse_pte: 0.5, // Reuse a previously defined PTE 50% of the time\n        },\n        {\n            reuse_satp: true,\n            repeats: 4,\n            ptes: [\n                {},\n                {\n                    // PTE entry -- set the address + the PPNs\n                    address: 0xcafebabe0,\n                },\n                {},\n            ],\n        },\n        {\n            repeats: 4,\n            ptes: [\n        \n                {},\n                {\n                    // PTE entry -- set the address + the PPNs\n                    // If you use a list wehere a number is needed, it'll choose at random\n                    address: [0xdeadbeef0, 0xcafebabe0],\n                },\n            ],\n        },\n        {\n            repeats: 2,\n            // You can specify an entire path. Be careful with this, with a random SATP and VA this can definitely fail.\n            ptes: [\n                { address: 0x254290f8df7cb8 },\n                { address: 0x81e1e3a2836788 },\n                { address: 0xca1841b209da68 },\n                { address: 0x8c8c82ea297008 },\n            ],\n        },\n        {\n            \"repeats\": 2,\n            \"va\": 0xf00fb00f,\n            \"satp.ppn\": 0xb00ffff000, // another valid way to specify an SATP PPN.\n            // When in a specific case it takes precedence over the global.\n        },\n        {\n            repeats: 3,\n            same_va_pa: 1, // does what it says on the box\n        },\n        {\n            // Possible to Alias and! do the same VA PA\n            repeats: 2,\n            same_va_pa: 1,\n            aliasing: 1,\n        },\n        {\n            repeats: 5,\n            pagesize: \"512G\", // Cases can be set to a different pagesize\n        },\n        {\n            repeats: 5,\n            pagesize: [\"512G\", \"1G\", \"2M\"], // Cases can also be set to randomly choose one from a list\n        },\n    ],\n}\n"}, {"name": "Sample Invalid", "data": "{\n    // comments\n    mode: 48, // Sv48\n    // Sample JSON for running test cases\n    // memory_size: 0x9000000000, // 576 GiB\n    // lower_bound: 0x2000000000, // Start addresses from at least here\n    test_cases: [\n        {\n            repeats: 10,\n            pagesize: \"2M\",\n            errors: {\n                p: 0.5, // overall error probability\n                types: [ // list the types you want\n                    \"mark_invalid\",\n                    \"write_no_read\",\n                    \"leaf_as_pointer\",\n                    \"uncleared_superpage\",\n                ],\n                weights: [1,4,2,5], // weight the error probabilities\n            },\n        },\n    ],\n}\n"}, {"name": "Sample Page Ranges", "data": "{\n    // comments\n    mode: 48, // Sv48\n    // Sample JSON for running test cases\n    // memory_size: 0x9000000000, // 576 GiB\n    // lower_bound: 0x2000000000, // Start addresses from at least here\n    test_cases: [\n        {\n            \"page_range\": {\n                start: 0x10000,\n                num_pages: 100,\n                // end: 0x4000, // can also be done as area\n                // step: 0x2000, // you can step instead of using the pagesize\n            },\n            \"pagesize\": [\"1G\", \"2M\", \"4K\"],\n            // same_va_pa: 1 // This with pagesize mixed will almost certainly cause a failure\n        },\n    ],\n}"}, {"name": "Sample Pte Range", "data": "{\n    // comments\n    mode: 48, // Sv48\n    // You can set it so that all PTEs will be in a certain range.\n    // Note: this is unlikely to work if the range is too narrow.\n    // All PTEs must also fall within the memory range (lower_bound thru memory_size)\n    pte_min: 0x50000000,\n    pte_max: 0x50100000,\n    // Sample JSON for running test cases\n    // memory_size: 0x9000000000, // 576 GiB\n    // lower_bound: 0x2000000000, // Start addresses from at least here\n    test_cases: [\n        {\n            repeats: 50,\n        },\n    ],\n}\n"}, {"name": "Sample Satp Usage", "data": "{\n    mode: 48, // Sv48\n    // Sample JSON for running test cases\n    satp: 0xf333f33300, // unqualified int is interpreted as the PPN.\n    // satp: {ppn : 0xf333f33300}, // also works.\n    // \"satp.ppn\" : 0xf333f33300, // also works.\n    test_cases: [\n        {\n            // Without a specific directive, defaults to simply showing the\n            repeats: 10,\n        },\n        {\n            // specifics take precedence over the general one\n            \"satp.ppn\": 0xf99f99f99, // another valid syntax.\n        },\n        {\n            // specifics take precedence over the general one\n            satp: { ppn: 0xf22f22f22 }, // another valid syntax.\n        },\n    ],\n}\n"}, {"name": "Sample Vpn", "data": "{\n    // comments\n    mode: 48, // Sv48\n    // Sample JSON for running test cases\n    // memory_size: 0x9000000000, // 576 GiB\n    // lower_bound: 0x2000000000, // Start addresses from at least here\n    test_cases: [\n        {\n            va: 0xcafebabe, // you could just set the VA if you want the brief way\n        },\n        {\n            va: {\n                vpn: [0x22, null, 0x33, null], // you can set the fields of the VPN.\n                // Null leaves a degree of freedom in that section VPN\n                // Note: it's VPN0 VPN1 VPN2 VPN3, so it'll look backwards here\n                offset: 0x131, // You can also set the offset.\n            },\n        },\n    ],\n}\n"}]